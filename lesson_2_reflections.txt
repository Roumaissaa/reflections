What happens when you initialize a repository? Why do you need to do it?

   Executing git init creates a .git subdirectory in the current working
   directory, which contains all of the necessary Git metadata for the new
   repository.
   We initialize a repository so it t can be used to convert an existing,
   unversioned project to a Git repository or initialize a new, empty repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

   -The staging area: stores information about what will go into the next commit.
   -The working directory: is a single checkout of one version of the project.
   -The Git directory: is where Git stores the metadata and object database for
   the project. 
   Staging area:
   -helps in reviewing changes
 
 How can you use the staging area to make sure you have one commit per logical
change?

   I will add to it all the files that make up my logical change one by one, then 
   commit all of them at once.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

   It would be helpful when working on new features or bug fixes, because it 
   keeps the main master branch free from questionable code.

How do the diagrams help you visualize the branch structure?

   It help at showing the points at which branches were taken, and the ancestors and descendants for each branch.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

   The result will be a new commit that combined the changes of the two branches from the point where they diverged.
   we represent it as a commit with two parents and that's because it's a result of the combination of two commits.

